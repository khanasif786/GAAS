#ifndef MULTI_CAM_SCENE_RETRIEVER_H
#define MULTI_CAM_SCENE_RETRIEVER_H
#include <glog/logging.h>
#include "scene_retrieve.h"
#include "multi_cam_utils/cam_info.h"
#include "multi_cam_utils/stereo_cam.h"



/*
struct CamInfo
{
    int cam_num;
    cv::Mat R_to_center;
    cv::Mat position_to_center;
    cv::Mat CameraMat;
    cv::Mat Q_mat;
};*/

class MultiCamSceneRetriever
{
public:
    MultiCamSceneRetriever(const string& voc,const std::string& config_file_path);
    MultiCamSceneRetriever(const string& voc,const std::string& config_file_path,const std::string& scene_file);
    void retrieveSceneFromMonoImages(vector<std::shared_ptr<cv::Mat> > pLimgs,//vector<std::shared_ptr<cv::Mat> > pRimgs,
                                cv::Mat& RT_mat_of_mono_cam_output, bool& match_success,int* pMatchedIndexID_output = nullptr);
    void retrieveSceneFromStereoImages();
    void retrieveSceneFromDepthImages();
private:
    cv::Filestorage fsSettings;
    std::shared_ptr<SceneRetriever> pSceneRetriever;
    vector<CamInfo> cams;
};

MultiCamSceneRetriever::MultiCamSceneRetriever(const string& voc,const std::string& config_file_path);
{
    this->fsSettings = cv::Filestorage(config_file_path);
    auto n = fsSettings["cams"];
    FileNodeIterator it = n.begin(), it_end = n.end();
    for (; it != it_end; ++it)
    {
        if ( (*it)["Mode"] == "stereo")
        {
            this->cams.push_back( dynamic_cast<CamInfo>StereoCamConfig(*it) );
        }
        else if( (*it)["Mode"] == "mono")
        {
            this->cams.push_back( CamInfo(*it) );
        }
    }
    this->pSceneRetriever = std::shared_ptr<SceneRetriever>(new SceneRetriever(...));//TODO: config this.
}
void MultiCamSceneRetriever::retrieveSceneFromMonoImages(vector<std::shared_ptr<cv::Mat> > pLimgs,//vector<std::shared_ptr<cv::Mat> > pRimgs,
                                cv::Mat& RT_mat_of_mono_cam_output, bool& match_success,int* pMatchedIndexID_output = nullptr)
{
    match_success = false;

    auto it = this->cams.begin();
    auto it_end = this->cams.end();
    for(;it!=it_end;++it)
    {
        if (it->isStereo())
        {
            auto &cam = dynamic_cast<StereoCamConfig> (*it);
        }
        else
        {
            auto &cam = (*it);
        }
    }
}
void MultiCamSceneRetriever::retrieveSceneFromStereoImages(vector<std::shared_ptr<cv::Mat> > pLimgs,vector<std::shared_ptr<cv::Mat> > pRimgs,
                                cv::Mat& RT_mat_of_mono_cam_output, bool& match_success,int* pMatchedIndexID_output = nullptr)
{
    match_success = false;
    if (pLimgs.size()!=pRimgs.size())
    {
        LOG(ERROR)<<"input limgs and rimgs has different size!"<<endl;
        return;
    }
    vector<StereoCamConfig*> pCams;
    for(;it!=it_end;++it)
    {   
        if (it->isStereo())
        {
            auto &cam = dynamic_cast<StereoCamConfig> (*it);
            pCams.push_back(&cam);
        }
    }
    LOG(INFO)<<"Stereo Cams num:"<<pCams.size()<<";stereo images num:"<<pLimgs.size();
    matched_count = 0;
    for(int i = 0;i<pCams.size();i++)
    {
        //retrieveSceneFromStereoImage has no Q_mat input interface.TODO.
        //this->pSceneRetriever->retrieveSceneFromStereoImage(*(pLimgs[i]), *(pRimgs[i]),
        //                           cv::Mat& mavros_pose, cv::Mat& RT_mat_of_stereo_cam_output, bool& match_success,int* pMatchedIndexID_output = nullptr);
        //we use retrieveSceneFromMonoImages instead.
        bool retrieved_success = false;
        cv::Mat output_rt;
        int matched_index;
        this->pSceneRetriever->retrieveSceneFromMonoImages( *(pLimgs[i]), pCams[i]->getCamMat(), output_rt, 
                                     retrieved_success,&matched_index);
        if(retrieved_success)
        {
            matched_count+=1;
            output_rt = output_rt*inv(  pCams[i]->getRTMat() );
        }
        //We need a strategy to judge this retrieve result.take care:here a result of (dynamic scene generated by) camera1 can be retrieved by camera2.
        //TODO:...Do something.
        //if(xxxxx)
        //{
        //    match_success = true;
        //    if(pMatchedIndexID_output!= nullptr)
        //    {
        //        *pMatchedIndexID_output = matched_index;
        //    }
        //}
        
    }

}
void MultiCamSceneRetriever::retrieveSceneFromDepthImages()
{;}

#endif
